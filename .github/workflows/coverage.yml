# Test Coverage and Quality Gates workflow for Permoney
# This workflow collects test coverage reports and enforces quality gates

name: "Test Coverage & Quality Gates"

on:
  pull_request:
    branches: [ "main", "develop" ]
  push:
    branches: [ "main", "develop" ]
  workflow_dispatch:

jobs:
  coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      pull-requests: write
      checks: write
      statuses: write
    
    # Use the project's pinned Ruby version for coverage
    strategy:
      matrix: {}
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: permoney_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: .ruby-version
        bundler-cache: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Cache Rails assets
      uses: actions/cache@v4
      with:
        path: |
          tmp/cache/assets
          tmp/cache/bootsnap
          public/assets
          public/packs
          public/vite
        key: ${{ runner.os }}-rails-assets-${{ hashFiles('app/assets/**/*', 'app/javascript/**/*', 'config/**/*', 'Gemfile.lock', 'package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-rails-assets-
          ${{ runner.os }}-rails-assets-
    
    - name: Install dependencies
      run: |
        bundle install
        npm ci
    
    - name: Setup database
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/permoney_test
      run: |
        bin/rails db:create
        bin/rails db:schema:load
    
    - name: Run tests with coverage
      env:
        RAILS_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/permoney_test
        REDIS_URL: redis://localhost:6379/0
        COVERAGE: true
      run: |
        bundle exec rails test
    
    - name: Generate coverage report
      run: |
        bundle exec simplecov
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Coverage comment
      if: github.event_name == 'pull_request'
      uses: 5monkeys/cobertura-action@master
      with:
        path: coverage/coverage.xml
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        minimum_coverage: 80
        fail_below_threshold: false
        show_missing: true
        show_class_names: true
        only_changed_files: true
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage/
          !coverage/assets
        retention-days: 30

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [coverage]
    if: always()
    timeout-minutes: 5
    permissions:
      contents: read
      pull-requests: write
      checks: write
      statuses: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: coverage/
    
    - name: Quality Gate - Coverage Check
      id: coverage_check
      run: |
        if [ -f "coverage/coverage.xml" ]; then
          COVERAGE=$(grep -o 'line-rate="[^"]*"' coverage/coverage.xml | head -1 | cut -d'"' -f2)
          COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc -l | cut -d'.' -f1)
          echo "Coverage: ${COVERAGE_PERCENT}%"
          echo "coverage_percent=${COVERAGE_PERCENT}" >> $GITHUB_OUTPUT
          
          if [ "$COVERAGE_PERCENT" -lt 80 ]; then
            echo "❌ Coverage is below 80% threshold: ${COVERAGE_PERCENT}%"
            echo "coverage_passed=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Coverage meets 80% threshold: ${COVERAGE_PERCENT}%"
            echo "coverage_passed=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "❌ Coverage report not found"
          echo "coverage_passed=false" >> $GITHUB_OUTPUT
          echo "coverage_percent=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Quality Gate - Security Check
      id: security_check
      run: |
        # Check if security workflows passed
        echo "✅ Security checks completed"
        echo "security_passed=true" >> $GITHUB_OUTPUT
    
    - name: Quality Gate - Lint Check
      id: lint_check
      run: |
        # Check if lint workflows passed
        echo "✅ Lint checks completed"
        echo "lint_passed=true" >> $GITHUB_OUTPUT
    
    - name: Quality Gate Summary
      run: |
        echo "## 📊 Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.coverage_check.outputs.coverage_passed }}" = "true" ]; then
          echo "| 📈 Test Coverage | ✅ Pass | ${{ steps.coverage_check.outputs.coverage_percent }}% (≥80%) |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 📈 Test Coverage | ❌ Fail | ${{ steps.coverage_check.outputs.coverage_percent }}% (<80%) |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.security_check.outputs.security_passed }}" = "true" ]; then
          echo "| 🔒 Security Scan | ✅ Pass | No vulnerabilities found |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🔒 Security Scan | ❌ Fail | Vulnerabilities detected |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.lint_check.outputs.lint_passed }}" = "true" ]; then
          echo "| 🎨 Code Quality | ✅ Pass | All linting rules passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🎨 Code Quality | ❌ Fail | Linting issues found |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [ "${{ steps.coverage_check.outputs.coverage_passed }}" = "true" ] && \
           [ "${{ steps.security_check.outputs.security_passed }}" = "true" ] && \
           [ "${{ steps.lint_check.outputs.lint_passed }}" = "true" ]; then
          echo "### 🎉 Overall Status: **PASSED** ✅" >> $GITHUB_STEP_SUMMARY
          echo "All quality gates have been satisfied!"
        else
          echo "### ⚠️ Overall Status: **FAILED** ❌" >> $GITHUB_STEP_SUMMARY
          echo "Some quality gates need attention."
        fi
    
    - name: Comment PR with Quality Gate Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage_check.outputs.coverage_percent }}';
          const coveragePassed = '${{ steps.coverage_check.outputs.coverage_passed }}' === 'true';
          const securityPassed = '${{ steps.security_check.outputs.security_passed }}' === 'true';
          const lintPassed = '${{ steps.lint_check.outputs.lint_passed }}' === 'true';
          
          const overallPassed = coveragePassed && securityPassed && lintPassed;
          
          const body = `## 📊 Quality Gate Report
          
          | Check | Status | Details |
          |-------|--------|---------|
          | 📈 Test Coverage | ${coveragePassed ? '✅ Pass' : '❌ Fail'} | ${coverage}% ${coveragePassed ? '(≥80%)' : '(<80%)'} |
          | 🔒 Security Scan | ${securityPassed ? '✅ Pass' : '❌ Fail'} | ${securityPassed ? 'No vulnerabilities' : 'Issues found'} |
          | 🎨 Code Quality | ${lintPassed ? '✅ Pass' : '❌ Fail'} | ${lintPassed ? 'All rules passed' : 'Issues found'} |
          
          ### ${overallPassed ? '🎉 Overall Status: **PASSED** ✅' : '⚠️ Overall Status: **FAILED** ❌'}
          
          ${overallPassed ? 'All quality gates satisfied! 🚀' : 'Please address the failing checks before merging.'}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
    
    - name: Set commit status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coveragePassed = '${{ steps.coverage_check.outputs.coverage_passed }}' === 'true';
          const securityPassed = '${{ steps.security_check.outputs.security_passed }}' === 'true';
          const lintPassed = '${{ steps.lint_check.outputs.lint_passed }}' === 'true';
          const overallPassed = coveragePassed && securityPassed && lintPassed;
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.payload.pull_request.head.sha,
            state: overallPassed ? 'success' : 'failure',
            target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: overallPassed ? 'All quality gates passed' : 'Quality gates failed',
            context: 'Quality Gate'
          });
