#!/usr/bin/env bash
# Database Restore Script for Permoney
# Restores encrypted PostgreSQL backup to local development database

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BACKUP_FILE="${1:-maybe_db_20251020_000001.dump.gpg}"
DB_NAME="${POSTGRES_DB:-permoney_development}"
DB_USER="${POSTGRES_USER:-postgres}"
DB_HOST="${DB_HOST:-localhost}"
DB_PORT="${DB_PORT:-5432}"

# Functions
print_header() {
    echo -e "${BLUE}================================================${NC}"
    echo -e "${BLUE}  Permoney Database Restore${NC}"
    echo -e "${BLUE}================================================${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚Ñπ $1${NC}"
}

check_prerequisites() {
    print_info "Checking prerequisites..."
    
    # Check if backup file exists
    if [ ! -f "$BACKUP_FILE" ]; then
        print_error "Backup file not found: $BACKUP_FILE"
        echo ""
        echo "Usage: bin/restore-db [backup_file.dump.gpg]"
        echo "Example: bin/restore-db maybe_db_20251020_000001.dump.gpg"
        exit 1
    fi
    print_success "Backup file found: $BACKUP_FILE"
    
    # Check if gpg is installed
    if ! command -v gpg &> /dev/null; then
        print_error "GPG is not installed. Please install it first:"
        echo "  macOS: brew install gnupg"
        echo "  Ubuntu: sudo apt-get install gnupg"
        exit 1
    fi
    print_success "GPG is installed"
    
    # Check if PostgreSQL is installed
    if ! command -v psql &> /dev/null; then
        print_error "PostgreSQL client (psql) is not installed. Please install it first:"
        echo "  macOS: brew install postgresql"
        echo "  Ubuntu: sudo apt-get install postgresql-client"
        exit 1
    fi
    print_success "PostgreSQL client is installed"
    
    # Check if pg_restore is installed
    if ! command -v pg_restore &> /dev/null; then
        print_error "pg_restore is not installed. Please install PostgreSQL tools."
        exit 1
    fi
    print_success "pg_restore is installed"
    
    echo ""
}

check_database_connection() {
    print_info "Checking database connection..."
    
    if PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d postgres -c '\q' 2>/dev/null; then
        print_success "Database connection successful"
    else
        print_error "Cannot connect to database server"
        echo ""
        echo "Please check your database configuration:"
        echo "  DB_HOST: $DB_HOST"
        echo "  DB_PORT: $DB_PORT"
        echo "  DB_USER: $DB_USER"
        echo ""
        echo "Make sure PostgreSQL is running:"
        echo "  macOS: brew services start postgresql"
        echo "  Ubuntu: sudo systemctl start postgresql"
        exit 1
    fi
    echo ""
}

show_restore_info() {
    print_info "Restore Configuration:"
    echo "  Backup file: $BACKUP_FILE"
    echo "  Database: $DB_NAME"
    echo "  Host: $DB_HOST"
    echo "  Port: $DB_PORT"
    echo "  User: $DB_USER"
    echo ""
}

confirm_restore() {
    print_warning "‚ö†Ô∏è  WARNING: This will DROP and RECREATE the database!"
    print_warning "‚ö†Ô∏è  All existing data in '$DB_NAME' will be LOST!"
    echo ""
    read -p "Are you sure you want to continue? (yes/no): " -r
    echo ""
    
    if [[ ! $REPLY =~ ^[Yy][Ee][Ss]$ ]]; then
        print_info "Restore cancelled by user"
        exit 0
    fi
}

decrypt_backup() {
    print_info "Decrypting backup file..."
    echo "You will be prompted for the GPG passphrase."
    echo ""
    
    DECRYPTED_FILE="${BACKUP_FILE%.gpg}"
    
    if gpg --decrypt --output "$DECRYPTED_FILE" "$BACKUP_FILE"; then
        print_success "Backup decrypted successfully: $DECRYPTED_FILE"
        echo ""
        return 0
    else
        print_error "Failed to decrypt backup file"
        echo ""
        echo "Please make sure you have the correct GPG passphrase."
        exit 1
    fi
}

drop_database() {
    print_info "Dropping existing database..."
    
    # Terminate existing connections
    PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d postgres -c \
        "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$DB_NAME' AND pid <> pg_backend_pid();" \
        > /dev/null 2>&1 || true
    
    # Drop database
    if PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d postgres -c "DROP DATABASE IF EXISTS $DB_NAME;" > /dev/null 2>&1; then
        print_success "Database dropped"
    else
        print_warning "Could not drop database (it may not exist)"
    fi
}

create_database() {
    print_info "Creating new database..."
    
    if PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d postgres -c "CREATE DATABASE $DB_NAME;" > /dev/null 2>&1; then
        print_success "Database created: $DB_NAME"
    else
        print_error "Failed to create database"
        exit 1
    fi
}

restore_database() {
    print_info "Restoring database from backup..."
    echo "This may take a few minutes depending on the backup size..."
    echo ""
    
    DECRYPTED_FILE="${BACKUP_FILE%.gpg}"
    
    if PGPASSWORD="$POSTGRES_PASSWORD" pg_restore \
        --host="$DB_HOST" \
        --port="$DB_PORT" \
        --username="$DB_USER" \
        --dbname="$DB_NAME" \
        --verbose \
        --no-owner \
        --no-acl \
        "$DECRYPTED_FILE" 2>&1 | grep -v "^pg_restore: warning:" || true; then
        
        print_success "Database restored successfully!"
    else
        print_warning "Restore completed with some warnings (this is usually normal)"
    fi
    echo ""
}

cleanup() {
    print_info "Cleaning up temporary files..."
    
    DECRYPTED_FILE="${BACKUP_FILE%.gpg}"
    
    if [ -f "$DECRYPTED_FILE" ]; then
        rm -f "$DECRYPTED_FILE"
        print_success "Temporary files removed"
    fi
    echo ""
}

verify_restore() {
    print_info "Verifying restore..."
    
    # Count tables
    TABLE_COUNT=$(PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -t -c \
        "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null | xargs)
    
    if [ "$TABLE_COUNT" -gt 0 ]; then
        print_success "Database verified: $TABLE_COUNT tables found"
        echo ""
        
        # Show some statistics
        print_info "Database Statistics:"
        PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -c \
            "SELECT schemaname, tablename, 
                    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size
             FROM pg_tables 
             WHERE schemaname = 'public' 
             ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC 
             LIMIT 10;" 2>/dev/null || true
    else
        print_warning "Database appears to be empty"
    fi
    echo ""
}

run_migrations() {
    print_info "Running pending migrations..."
    
    if bundle exec rails db:migrate 2>&1 | tail -5; then
        print_success "Migrations completed"
    else
        print_warning "Migration check completed (may have warnings)"
    fi
    echo ""
}

print_summary() {
    echo ""
    print_header
    print_success "Database restore completed successfully!"
    echo ""
    print_info "Next steps:"
    echo "  1. Start the Rails server: bin/dev"
    echo "  2. Check the application: http://localhost:3000"
    echo "  3. Verify your data is correct"
    echo ""
    print_info "Database: $DB_NAME"
    print_info "Host: $DB_HOST:$DB_PORT"
    echo ""
    print_success "You're all set! üéâ"
    echo ""
}

# Main execution
main() {
    print_header
    
    # Load environment variables
    if [ -f .env.local ]; then
        set -a
        source <(grep -v '^#' .env.local | grep -v '^$' | sed 's/#.*//')
        set +a
    fi
    
    check_prerequisites
    check_database_connection
    show_restore_info
    confirm_restore
    
    # Restore process
    decrypt_backup
    drop_database
    create_database
    restore_database
    cleanup
    verify_restore
    run_migrations
    
    print_summary
}

# Trap errors and cleanup
trap cleanup EXIT

# Run main function
main
